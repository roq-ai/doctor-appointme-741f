generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date             DateTime      @db.Date
  time             DateTime      @db.Time(6)
  status           String        @db.VarChar(255)
  patient_id       String?       @db.Uuid
  doctor_id        String?       @db.Uuid
  organization_id  String?       @db.Uuid
  appointment_type String?       @db.VarChar(255)
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  user             user?         @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization     organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient          patient?      @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model availability {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  doctor_id       String?       @db.Uuid
  day_of_week     String        @db.VarChar(255)
  start_time      DateTime      @db.Time(6)
  end_time        DateTime      @db.Time(6)
  organization_id String?       @db.Uuid
  status          String?       @db.VarChar(255)
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  user            user?         @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model insurance {
  id                   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String        @db.VarChar(255)
  description          String?       @db.VarChar(255)
  organization_id      String?       @db.Uuid
  coverage             String?       @db.VarChar(255)
  terms_and_conditions String?       @db.VarChar(255)
  provider_id          String?       @db.Uuid
  created_at           DateTime      @default(now()) @db.Timestamp(6)
  updated_at           DateTime      @default(now()) @db.Timestamp(6)
  organization         organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                 user?         @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient              patient[]
}

model organization {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?        @db.VarChar(255)
  location       String?        @db.VarChar(255)
  working_hours  String?        @db.VarChar(255)
  contact_number String?        @db.VarChar(255)
  website        String?        @db.VarChar(255)
  name           String         @db.VarChar(255)
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  updated_at     DateTime       @default(now()) @db.Timestamp(6)
  user_id        String         @db.Uuid
  tenant_id      String         @db.VarChar(255)
  appointment    appointment[]
  availability   availability[]
  insurance      insurance[]
  user           user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String?       @db.Uuid
  date_of_birth     DateTime?     @db.Date
  gender            String?       @db.VarChar(255)
  insurance_id      String?       @db.Uuid
  medical_history   String?       @db.VarChar(255)
  emergency_contact String?       @db.VarChar(255)
  created_at        DateTime      @default(now()) @db.Timestamp(6)
  updated_at        DateTime      @default(now()) @db.Timestamp(6)
  appointment       appointment[]
  insurance         insurance?    @relation(fields: [insurance_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  appointment  appointment[]
  availability availability[]
  insurance    insurance[]
  organization organization[]
  patient      patient[]
}
